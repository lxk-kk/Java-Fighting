【请求过程】
	输入url
	1、Redirect跳转：可能浏览器已经记录该url，以及可能永久跳转到一个新地址，所以浏览器需要判断一下，需不需要redirect以及要redirect到哪个地方
	2、App cache查缓存：浏览器可能已经缓存了该地址，所以会去app cache进行查看，如果有则会直接返回，如果没有则需要去服务端请求数据
	3、DNS域名解析：由于输入的是域名，则需要将域名映射到ip之后才能真正的访问到服务器，所以需要查找一下域名对应的IP地址，即DNS解析
	4、TCP连接：有了IP之后，建立TCP链接：需要经历tcp的三次握手才能建立起连接。
		如果是https，则和http的三次握手不一样，因为有保证数据安全传输的过程。
	5、Request发送请求：连接建立好以后，才会发送http请求的数据包
	6、Response服务端响应：服务器接收到请求，并进行数据操作以后，开始响应
	7、浏览器接收响应

【网络协议分层】
	应用层-传输层-网络层-数据链路层-物理层
	
	低三层：
		物理层：主要作用就是定义物理设备如何传输数据：电脑硬件如：网卡端口、网线、网线光缆（将数据传输到另外一台服务器上）
		数据链路层：在通信实体间建立数据链路的连接：既然上述物理层已经可以连接，那就需要有软件服务通过物理设备创建电路连接，用来传输数据
		网络层：为数据在结点之间传输创建逻辑链路。例如：本电脑需要访问百度的服务器，则我的电脑要怎样找到百度服务器所在的地址，它就是一个逻辑关系，这个关系就是在网络层进行建立的。
	上层：
		传输层：有两个协议：TCT/IP协议，UDP协议
			1、提供了端到端（End-to-End）的服务：两端之间如何传输数据，以及传输数据的方式都是在这一层进行定义的：包括数据的分包分片，以及组装等协议
			2、传输层向高层屏蔽了下层数据通信的细节：当输入url后会涉及到一系列的数据拼装传输，作为浏览器客户端并不需要知道该过程是如何进行的，这些都由传输层进行封装。
				另外我们创建ajax请求，ajax也是一个http请求，也会涉及数据的拼装和可靠传输，也是由传输层进行封装。
		
		应用层：为应用软件提供了很多服务，是构建于tcp协议之上的，会屏蔽网络传输相关细节


【http的三次握手】
	概念：在客户端和服务端发送请求和响应的过程中需要建立一个TCP Connection连接，由于http只有请求和响应的概念，不存在连接，并且请求和响应的都是数据包，所以要创建客户端和服务端之间数据传输的通道，这个通道就是在tcp里面建立的，可供客户端请求和服务端响应。
		在http1.0中，一次tcp连接只供一次请求响应（一次HTTP通信）；在http1.1中，可以声明tcp一直存在，供http多次请求和响应；在http2中tcp连接中的请求可以并发的执行。		
		TCP连接有三次握手的过程，也就意味着有三次网络传输的过程，会耗时-----所以需要一次连接多次请求响应，减少tcp连接中的耗时。
	
	三次握手过程：
		1、客户端发送一个需要传输数据包的请求到服务端。
			请求信息：SYN=1,Seq=x的信息：SYN=1是一个标识位，表示这是一个创建请求的数据包。Seq一般为1
			----同时向服务端表明，客户端能正常发送请求。
		2、服务端接收请求，知道有一个客户端等待与它进行连接，当允许连接之后，服务端会开启一个tcp的socket端口，并将允许连接的信息进行返回。
			返回信息：SYN=1,ACK=X+1,Seq=Y：SYN=1依旧是一个标识位；ACK的值是客户端发送的Seq+1；并且还会发送一个服务端的Seq
			----向客户端表明，服务端能接收请求也能进行响应
		3、客户端接收返回信息，知道服务端已经允许客户端创建tcp连接。客户端会再次发送信息到服务端。
			发送信息：ACK=Y+1,Seq=Z：ACK是标志位
			----向服务端表明，客户端能正常接收响应。
		这就是三次握手的过程。
	为什么要建立三次握手：
		是为了防止服务端开启一些无用的连接，规避一些因为网络中的延迟而导致的服务器资源开销的问题。
		由于当服务端允许客户端连接以后，便会开启一个socket端口接收客户端的数据，如果客户端因为网络延迟等因素导致接收响应超时，可能导致发送多次请求，或者向别的服务器发送请求，由于服务端不知道客户端抢矿，就会开治端口等着客户端连接，这是服务端的资源就会被浪费掉。
		
	三次握手能建立器稳固的连接，是一个相互确认的过程：
		第一次握手：服务端知道客户端能发送请求。
		第二次握手：客户端知道服务端能接收并发送请求。
		第三次握手：服务端知道客户端能接收请求。

【URI-URL-URN】
	URI：统一资源标识符：由某个协议方案表示的资源的定位标识符（协议方案就是访问资源所使用的协议类型名称：http、ftp、telnet、file等）
		用来唯一标识互联网上的信息资源
		包括了URL和URN
	URL：统一资源定位符：表示资源在互联网中的定位。（URI是URL的子集）
	URN：永久统一资源定位符：用于在资源移动后还能过旧的URN访问，目前方案不成熟
	
	URI格式：
		http://user:password@www.example.jp:80/dir/index.html?uid=1#ch1
	解析：
		1、使用http::或者https:等协议方案名获取访问资源时要指定的协议类型。
			不区分大小写，最后一个附上冒号(:)
			也可以使用data:或者javascript:这类指定数据或者脚本程序的方案名
		2、登录信息（认证）：user:password
			指定用户名和密码作为从服务端获取资源时必要的登录信息（可选）：由于这种验证方式不安全，所以不会使用了
		3、服务器地址：www.example.jp
			使用绝对URI必须只当带访问的服务器地址。
			地址可以是域名，也可以是IPv4（ip）地址，还可以是[0:0:0:0:0:0:0:1]这样用方括号[]括起来的IPv6地址
		4、服务器端口号：80
			指定服务器连接的网络端口号。（可选）正式发布的网站都是使用域名的方式，并且现在大多端口号默认为80
		5、带层次的文件路径：/dir/index.html：即路由
			指定服务器上的文件路径来定位特指的资源，与UNIX系统的文件目录结构相似。
			由于现在的web应用越来越复杂，资源都是存放在数据库，并不是某个磁盘的文件，所以路由都是用来在后端程序中判别url所要请求的数据，而不是直接对应目录结构的之间的关系。
		6、查询字符串：也就是请求参数uid=1（可选）
		7、片段标识符：#ch1
			使用片段标识符通常可以标记处以获取资源中的子资源。例如，文档中的锚点。

【http协议】
	
	1、请求报文构成：
		（1）请求行：请求方法、URL、协议类型及其版本
		（2）请求首部字段
		（3）请求内容实体
	2、响应报文构成：
		（1）响应行：协议及其版本、状态码、状态码原因短语
		（2）响应首部字段
		（3）响应主体
	3、http是无状态协议。http协议自身不对请求和响应之间的通信状态进行保存。也就是说在http这个级别，协议对于发送过的请求或者响应都不做持久化处理。
		每当有新的请求发送时，就会有新的响应产生，协议本身并不保留之前的一切请求或者响应报文信息。这是为了更快地处理大量事务，确保协议的可伸缩性。
		在http1.1也是无状态的，但是引入cookie技术，实现了期望中的保持状态功能。
	4、http中的请求方法：
		GET：获取资源：GET方法用来请求访问已被URI识别的资源。指定的资源经服务器端解析后返回响应的内容。
		POST：传输实体主体。它和get相似，但是主要目的不是获取响应的主体内容。
		PUT：传输文件。就像FTP协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到URI指定的位置。
		DELETE：删除文件。与PUT相反，DELETE方法按请求URI删除指定的资源
		以上四个方法，提供了类似CRUD的数据操作。其中PUT和DELETE方法自身是不带验证机制的，任何人都可以上传文件，删除文件，存在安全性问题。因此一般的web网站都不使用该方法。除非配合web应用程序的验证机制，或者架构设计采用REST（表征状态转移）标准的同类网站。
		
		HEAD：获得报文首部。它和GET方法一样，只是不返回报文主体部分，用于确认URI的有效性即资源更新的日期时间等。
		OPTIONS：用来查询针对请求URI指定的资源支持的方法。
		TRACE：追踪路径。TRACE方法请求WEB服务端将之前的请求通信返回给客户端。
			发送请求时，在Max-Forwards首部字段中填入数值，每经过一个服务器端就将该数字减1，当数值刚好减到0时，就停止继续传输，最后接收到请求的服务器端则返回状态码200 OK。
			客户端通过TRACE方法可以查询发送出去的请求是怎样被加工修改/篡改的。因为：请求想要连接到源目标服务器可能会通过代理中转，TRACE方法就是用来确认连接过程中发送的一系列操作。
			TRACE方法不常用，也容易收到CST跨站追踪攻击。
		CONNECTION：要求用隧道协议连接代理。
			语法：CONNECTION 代理服务器名:端口号 HTTP版本
			该方法要求 在与代理服务器通信时建立隧道，实现用隧道协议进行TCP通信。主要使用SSL（安全套接层）和TLS（传输层安全）协议把通信内容加密后经过网络隧道传输。